var UNKNOWN = 0
var YES = 1
var NO  = 2
var PAL = [WHITE, BLACK, BLUE]

//var screen = new KCanvas(0,0,200,200,4)
var screen = new KSceneGraph(0,0,200,200,4)
var image = [0,1,1,
             0,1,0,
             1,1,1].reshape([3,3])
//every value in the image will be 0 for empty or 1 for pixel is there.
var board = []

@type('start',setup)
fun setup() {
    print("doing setup")
    setup_board()
    setup_input()
}

//click rect to cycle it through ?, x, o:  don't know, marked filled, marked empty
//this implies we need a scenegraph of rects. make board be an array of objects with state
//plus rects at the right places, then just draw them with a single call

fun setup_board() {
    var s = 20
    var off = [0,0]
    board = image.map(@(v,i,j) => {
        cell = Rect(x:(i*s) + off[0] + 1, y:(j*s) + off[1] + 1, w:s-2, h:s-2, color: PAL[cell.state])
        cell.state = UNKNOWN
        cell.type = 'cell'
        return cell
    })
    screen.shapes.push_end_all(board)

    // make clues for the rows
    range(3).map(@(j) => {
        let row = image[?,j]
        let clues = [0]
        row.each(@(v,i) => {
            if v == 0 clues.push_end(0)
            if v == 1 clues.push_end(clues.pop_end()+1)
        })
        clues = clues.filter(@v => not (v == 0))
        var pos = [65,15]
        clues.map(@(v,j) => Label(xy:pos+[i,j]*s, text:v, color:BLACK)) >> screen.shapes.push_end_all()
    })
    // make clues for the columns
    range(3).map(@(i) => {
        let col = image[i,?]
        let clues = [0]
        col.each(@(v,i) => {
            if v == 0 clues.push_end(0)
            if v == 1 clues.push_end(clues.pop_end()+1)
        })
        clues = clues.filter(@v => not (v == 0))
        var pos = [5,70]
        clues.map(@(v,j) => Label(xy:pos+[i,j]*s, text:v, color:BLACK)) >> screen.shapes.push_end_all()
    })
    board.redraw()
}

//on(board,'click',@(v,i,j) => {
//  match v {
//    v == UNKNOWN => { board[i,j] = YES }
//    v == YES     => { board[i,j] = NO }
//    v == NO      => { board[i,j] = UNKNOWN }
//  }
//  redraw()
//})

//non(check_button,'click', @=>{
//   if board >= image dialog("You win")
//})


fun setup_input() {
    print("setting up the input")
    screen.on('click',@(shape) => {
        print("clicked on a shape",shape)
        if(shape.type == 'cell') {
            print("need to cycle the cell")
        }

    })
}
