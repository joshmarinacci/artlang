@board("canvas")
var W = 20 //width
var H = 20 //height
var S = 10 //scale
var gap = S/2 // offset from the grid for drawing
var NONE = [-1,-1] // marker for when we need to be done

//directions up, right, down, left
var directions = [ [0,-1],
                   [1, 0],
                   [0, 1],
                  [-1, 0]]

var screen = new KSceneGraph(w:W*S, h:H*S, scale:4)
var grid = MDArray([W,H]) // make empty grid
grid.fill(0)

fun rand_search(pos) {
    grid[pos] := 1  // mark cell as used
    while (true) {
        //find valid and empty adjacent cell, or return
        var cells = directions.shuffle()
            .map(@dir => dir+pos)
            .filter(@pos => grid.is_valid_index(pos))
            .filter(@pos => grid[pos] == 0)
        if cells.length < 1 return NONE
        var next = cells.pop_end()
        screen.shapes.push_end(Line(start: (pos*S) +gap, end: (next*S) + gap, color:GREEN,  lineWidth:5))
        screen.redraw(0)
        rand_search(next)
        pos = next
    }
}

@type('start',setup)
fun setup() {
    rand_search([randi(W), randi(H)])
}

