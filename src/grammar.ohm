keylang {
    under = "_"
    q = "\'"
    qq = "\""

    number  (a number)
        = "-"? digit+ "." digit+ --float
        | "-"? digit+ --int

    string (a plain string with single or double quotes)
      = q (~q any)*  q
      | qq(~qq any)* qq

    boolean = "true" | "false"

    ListLiteral = "[" ListOf<Exp,","> "]"

    Literal = ListLiteral | number | string | boolean

    not = "not" ~ident
    keyword = "fun" | "if" | "else" | "true" | "false" | "and" | "or" | not
    ident = ~keyword valid_ident
    valid_ident = letter (letter | digit | under)* dot_part?
    dot_part = "." ident
    assign_op = "=" | ":="

    comment = space* "//" toEOL
    toEOL = (~"\n" any)* "\n"

    compare_op = ">=" | "<=" | "<" | ">" | "==" | "!=" | "and" | "or" | "mod"
    pipeline_op  = ">>"
    mul_op  = "*" | "/"
    add_op  = "+" | "-"
    caop  = "+=" | "-=" | "*=" | "/="
    binop =  caop | add_op | mul_op | pipeline_op | compare_op
    BinExp = Exp binop Exp
    unop = "not"
    UnExp  = unop Exp
    ParenExp = "(" Exp ")"
    VarDec
        = "var" ident assign_op Exp --assign
        | "var" ident --dec

    Deref = Exp "." ident
    PositionalFunCall = Exp "(" ListOf<SoloExp,","> ")"
    KeywordArg = ident ":" Exp
    KeywordFunCall = Exp "(" ListOf<KeywordArg,","> ")"
    FunctionCall = PositionalFunCall | KeywordFunCall
    FunctionDef
        = "fun" ident "(" ListOf<ident,","> ")" SoloExp --slim
        | "fun" ident "(" ListOf<ident,","> ")" Block   --full
    CondExp
        = "if" SoloExp SoloExp --slim
        | "if" ParenExp Block ("else" Block)? --full

    Lambda
       =  "@" "(" ListOf<ident,","> ")" "=>" Block   --full
       |  "@" "(" ListOf<ident,","> ")" "=>" SoloExp --thin
       |  "@" ident "=>" SoloExp                     --slim
       |  "@" SoloExp                                --superslim

    ArraySliceWildcard = "?"
    ArrayIndex = ArraySliceWildcard | SoloExp
    ArrayAccess = ident "[" ListOf<ArrayIndex,","> "]"
    ArraySetAccess = ident "[" ListOf<ArrayIndex,","> "]"
    ArrayGetterExp = ArrayAccess
    Assignment
      = ident assign_op Exp         --simple
      | ArraySetAccess assign_op Exp   --array

    SoloExp =  Assignment | FunctionCall | Return | Lambda | BinExp | ArrayGetterExp | ParenExp | UnExp | Deref | Literal | ident | comment
    return_op = "return" | "^"
    Return = return_op SoloExp
    Directive = "@" ident "(" ListOf<Exp,","> ")"
    WhileLoop = "while" ParenExp Block

    Block = "{" Exp* "}"
    Exp = Directive | FunctionDef | WhileLoop | VarDec | CondExp | Assignment | SoloExp | Block
}
